


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ********************/
    2 00000000         ;/*                                                     
                                          */
    3 00000000         ;/*       Copyright (c) Microsoft Corporation. All right
                       s reserved.        */
    4 00000000         ;/*                                                     
                                          */
    5 00000000         ;/*       This software is licensed under the Microsoft 
                       Software License   */
    6 00000000         ;/*       Terms for Microsoft Azure RTOS. Full text of t
                       he license can be  */
    7 00000000         ;/*       found in the LICENSE file at https://aka.ms/Az
                       ureRTOS_EULA       */
    8 00000000         ;/*       and in the root directory of this software.   
                                          */
    9 00000000         ;/*                                                     
                                          */
   10 00000000         ;/******************************************************
                       ********************/
   11 00000000         ;
   12 00000000         ;
   13 00000000         ;/******************************************************
                       ********************/
   14 00000000         ;/******************************************************
                       ********************/
   15 00000000         ;/**                                                    
                                          */
   16 00000000         ;/** ThreadX Component                                  
                                          */
   17 00000000         ;/**                                                    
                                          */
   18 00000000         ;/**   Thread                                           
                                          */
   19 00000000         ;/**                                                    
                                          */
   20 00000000         ;/******************************************************
                       ********************/
   21 00000000         ;/******************************************************
                       ********************/
   22 00000000         ;
   23 00000000         ;
   24 00000000                 IMPORT           _tx_thread_current_ptr
   25 00000000                 IMPORT           _tx_thread_execute_ptr
   26 00000000                 IMPORT           _tx_timer_time_slice
   27 00000000                 IMPORT           _tx_thread_system_stack_ptr
   28 00000000                 IMPORT           _tx_thread_preempt_disable
   29 00000000                 IF               :DEF:TX_ENABLE_EXECUTION_CHANGE
_NOTIFY
   32                          ENDIF
   33 00000000         ;
   34 00000000         ;
   35 00000000                 AREA             ||.text||, CODE, READONLY
   36 00000000                 PRESERVE8
   37 00000000         ;/******************************************************
                       ********************/
   38 00000000         ;/*                                                     
                                          */
   39 00000000         ;/*  FUNCTION                                           



ARM Macro Assembler    Page 2 


                           RELEASE        */
   40 00000000         ;/*                                                     
                                          */
   41 00000000         ;/*    _tx_thread_schedule                              
                        Cortex-M4/AC5     */
   42 00000000         ;/*                                                     
                             6.0.2        */
   43 00000000         ;/*  AUTHOR                                             
                                          */
   44 00000000         ;/*                                                     
                                          */
   45 00000000         ;/*    William E. Lamie, Microsoft Corporation          
                                          */
   46 00000000         ;/*                                                     
                                          */
   47 00000000         ;/*  DESCRIPTION                                        
                                          */
   48 00000000         ;/*                                                     
                                          */
   49 00000000         ;/*    This function waits for a thread control block po
                       inter to appear in */
   50 00000000         ;/*    the _tx_thread_execute_ptr variable.  Once a thre
                       ad pointer appears */
   51 00000000         ;/*    in the variable, the corresponding thread is resu
                       med.               */
   52 00000000         ;/*                                                     
                                          */
   53 00000000         ;/*  INPUT                                              
                                          */
   54 00000000         ;/*                                                     
                                          */
   55 00000000         ;/*    None                                             
                                          */
   56 00000000         ;/*                                                     
                                          */
   57 00000000         ;/*  OUTPUT                                             
                                          */
   58 00000000         ;/*                                                     
                                          */
   59 00000000         ;/*    None                                             
                                          */
   60 00000000         ;/*                                                     
                                          */
   61 00000000         ;/*  CALLS                                              
                                          */
   62 00000000         ;/*                                                     
                                          */
   63 00000000         ;/*    None                                             
                                          */
   64 00000000         ;/*                                                     
                                          */
   65 00000000         ;/*  CALLED BY                                          
                                          */
   66 00000000         ;/*                                                     
                                          */
   67 00000000         ;/*    _tx_initialize_kernel_enter          ThreadX entr
                       y function         */
   68 00000000         ;/*    _tx_thread_system_return             Return to sy
                       stem from thread   */



ARM Macro Assembler    Page 3 


   69 00000000         ;/*    _tx_thread_context_restore           Restore thre
                       ad's context       */
   70 00000000         ;/*                                                     
                                          */
   71 00000000         ;/*  RELEASE HISTORY                                    
                                          */
   72 00000000         ;/*                                                     
                                          */
   73 00000000         ;/*    DATE              NAME                      DESCR
                       IPTION             */
   74 00000000         ;/*                                                     
                                          */
   75 00000000         ;/*  06-30-2020     William E. Lamie         Initial Ver
                       sion 6.0.1         */
   76 00000000         ;/*  08-14-2020     Scott Larson             Modified co
                       mment(s), clean up */
   77 00000000         ;/*                                            whitespac
                       e, resulting       */
   78 00000000         ;/*                                            in versio
                       n 6.0.2            */
   79 00000000         ;/*                                                     
                                          */
   80 00000000         ;/******************************************************
                       ********************/
   81 00000000         ;VOID   _tx_thread_schedule(VOID)
   82 00000000         ;{
   83 00000000                 EXPORT           _tx_thread_schedule
   84 00000000         _tx_thread_schedule
   85 00000000         ;
   86 00000000         ;    /* This function should only ever be called on Cort
                       ex-M
   87 00000000         ;       from the first schedule request. Subsequent sche
                       duling occurs
   88 00000000         ;       from the PendSV handling routines below. */
   89 00000000         ;
   90 00000000         ;    /* Clear the preempt-disable flag to enable resched
                       uling after initialization on Cortex-M targets.  */
   91 00000000         ;
   92 00000000 F04F 0000       MOV              r0, #0      ; Build value for T
                                                            X_FALSE
   93 00000004 4A32            LDR              r2, =_tx_thread_preempt_disable
 
                                                            ; Build address of 
                                                            preempt disable fla
                                                            g
   94 00000006 6010            STR              r0, [r2, #0] ; Clear preempt di
                                                            sable flag
   95 00000008         ;
   96 00000008         ;    /* Clear CONTROL.FPCA bit so VFP registers aren't u
                       nnecessarily stacked.  */
   97 00000008         ;
   98 00000008                 IF               {TARGET_FPU_VFP} = {TRUE}
   99 00000008 F3EF 8014       MRS              r0, CONTROL ; Pickup current CO
                                                            NTROL register
  100 0000000C F020 0004       BIC              r0, r0, #4  ; Clear the FPCA bi
                                                            t
  101 00000010 F380 8814       MSR              CONTROL, r0 ; Setup new CONTROL
                                                             register
  102 00000014                 ENDIF



ARM Macro Assembler    Page 4 


  103 00000014         ;
  104 00000014         ;    /* Enable the interrupts */
  105 00000014         ;
  106 00000014 B662            CPSIE            i
  107 00000016         ;
  108 00000016         ;    /* Enter the scheduler for the first time.  */
  109 00000016         ;
  110 00000016 F04F 5080       MOV              r0, #0x10000000 ; Load PENDSVSE
                                                            T bit
  111 0000001A F04F 21E0       MOV              r1, #0xE000E000 
                                                            ; Load NVIC base
  112 0000001E F8C1 0D04       STR              r0, [r1, #0xD04] ; Set PENDSVBI
                                                            T in ICSR
  113 00000022 F3BF 8F4F       DSB                          ; Complete all memo
                                                            ry accesses
  114 00000026 F3BF 8F6F       ISB                          ; Flush pipeline
  115 0000002A         ;
  116 0000002A         ;    /* Wait here for the PendSV to take place.  */
  117 0000002A         ;
  118 0000002A         __tx_wait_here
  119 0000002A E7FE            B                __tx_wait_here ; Wait for the P
                                                            endSV to happen
  120 0000002C         ;}
  121 0000002C         ;
  122 0000002C         ;    /* Generic context switching PendSV handler.  */
  123 0000002C         ;
  124 0000002C                 EXPORT           __tx_PendSVHandler
  125 0000002C                 EXPORT           PendSV_Handler
  126 0000002C         __tx_PendSVHandler
  127 0000002C         PendSV_Handler
  128 0000002C         ;
  129 0000002C         ;    /* Get current thread value and new thread pointer.
                         */
  130 0000002C         ;
  131 0000002C         __tx_ts_handler
  132 0000002C         
  133 0000002C                 IF               :DEF:TX_ENABLE_EXECUTION_CHANGE
_NOTIFY
  142                          ENDIF
  143 0000002C F240 0000 
              F2C0 0000        MOV32            r0, _tx_thread_current_ptr ; Bu
                                                            ild current thread 
                                                            pointer address
  144 00000034 F240 0200 
              F2C0 0200        MOV32            r2, _tx_thread_execute_ptr ; Bu
                                                            ild execute thread 
                                                            pointer address
  145 0000003C F04F 0300       MOV              r3, #0      ; Build NULL value
  146 00000040 6801            LDR              r1, [r0]    ; Pickup current th
                                                            read pointer
  147 00000042         ;
  148 00000042         ;    /* Determine if there is a current thread to finish
                        preserving.  */
  149 00000042         ;
  150 00000042 B1A9            CBZ              r1, __tx_ts_new ; If NULL, skip
                                                             preservation
  151 00000044         ;
  152 00000044         ;    /* Recover PSP and preserve current thread context.
                         */



ARM Macro Assembler    Page 5 


  153 00000044         ;
  154 00000044 6003            STR              r3, [r0]    ; Set _tx_thread_cu
                                                            rrent_ptr to NULL
  155 00000046 F3EF 8C09       MRS              r12, PSP    ; Pickup PSP pointe
                                                            r (thread's stack p
                                                            ointer)
  156 0000004A E92C 0FF0       STMDB            r12!, {r4-r11} ; Save its remai
                                                            ning registers
  157 0000004E                 IF               {TARGET_FPU_VFP} = {TRUE}
  158 0000004E F01E 0F10       TST              LR, #0x10   ; Determine if the 
                                                            VFP extended frame 
                                                            is present
  159 00000052 D101            BNE              _skip_vfp_save
  160 00000054 ED2C 8A10       VSTMDB           r12!,{s16-s31} ; Yes, save addi
                                                            tional VFP register
                                                            s
  161 00000058         _skip_vfp_save
  162 00000058                 ENDIF
  163 00000058 F240 0400 
              F2C0 0400        MOV32            r4, _tx_timer_time_slice ; Buil
                                                            d address of time-s
                                                            lice variable
  164 00000060 F84C ED04       STMDB            r12!, {LR}  ; Save LR on the st
                                                            ack
  165 00000064         ;
  166 00000064         ;    /* Determine if time-slice is active. If it isn't, 
                       skip time handling processing.  */
  167 00000064         ;
  168 00000064 6825            LDR              r5, [r4]    ; Pickup current ti
                                                            me-slice
  169 00000066 F8C1 C008       STR              r12, [r1, #8] ; Save the thread
                                                             stack pointer
  170 0000006A B10D            CBZ              r5, __tx_ts_new ; If not active
                                                            , skip processing
  171 0000006C         ;
  172 0000006C         ;    /* Time-slice is active, save the current thread's 
                       time-slice and clear the global time-slice variable.  */
                       
  173 0000006C         ;
  174 0000006C 618D            STR              r5, [r1, #24] ; Save current ti
                                                            me-slice
  175 0000006E         ;
  176 0000006E         ;    /* Clear the global time-slice.  */
  177 0000006E         ;
  178 0000006E 6023            STR              r3, [r4]    ; Clear time-slice
  179 00000070         ;
  180 00000070         ;    /* Executing thread is now completely preserved!!! 
                        */
  181 00000070         ;
  182 00000070         __tx_ts_new
  183 00000070         ;
  184 00000070         ;    /* Now we are looking for a new thread to execute! 
                        */
  185 00000070         ;
  186 00000070 B672            CPSID            i           ; Disable interrupt
                                                            s
  187 00000072 6811            LDR              r1, [r2]    ; Is there another 
                                                            thread ready to exe
                                                            cute?



ARM Macro Assembler    Page 6 


  188 00000074 B1C9            CBZ              r1, __tx_ts_wait ; No, skip to 
                                                            the wait processing
                                                            
  189 00000076         ;
  190 00000076         ;    /* Yes, another thread is ready for else, make the 
                       current thread the new thread.  */
  191 00000076         ;
  192 00000076 6001            STR              r1, [r0]    ; Setup the current
                                                             thread pointer to 
                                                            the new thread
  193 00000078 B662            CPSIE            i           ; Enable interrupts
                                                            
  194 0000007A         ;
  195 0000007A         ;    /* Increment the thread run count.  */
  196 0000007A         ;
  197 0000007A         __tx_ts_restore
  198 0000007A 684F            LDR              r7, [r1, #4] ; Pickup the curre
                                                            nt thread run count
                                                            
  199 0000007C F240 0400 
              F2C0 0400        MOV32            r4, _tx_timer_time_slice ; Buil
                                                            d address of time-s
                                                            lice variable
  200 00000084 698D            LDR              r5, [r1, #24] ; Pickup thread's
                                                             current time-slice
                                                            
  201 00000086 F107 0701       ADD              r7, r7, #1  ; Increment the thr
                                                            ead run count
  202 0000008A 604F            STR              r7, [r1, #4] ; Store the new ru
                                                            n count
  203 0000008C         ;
  204 0000008C         ;    /* Setup global time-slice with thread's current ti
                       me-slice.  */
  205 0000008C         ;
  206 0000008C 6025            STR              r5, [r4]    ; Setup global time
                                                            -slice
  207 0000008E         
  208 0000008E                 IF               :DEF:TX_ENABLE_EXECUTION_CHANGE
_NOTIFY
  215                          ENDIF
  216 0000008E         ;
  217 0000008E         ;    /* Restore the thread context and PSP.  */
  218 0000008E         ;
  219 0000008E F8D1 C008       LDR              r12, [r1, #8] ; Pickup thread's
                                                             stack pointer
  220 00000092 F85C EB04       LDMIA            r12!, {LR}  ; Pickup LR
  221 00000096                 IF               {TARGET_FPU_VFP} = {TRUE}
  222 00000096 F01E 0F10       TST              LR, #0x10   ; Determine if the 
                                                            VFP extended frame 
                                                            is present
  223 0000009A D101            BNE              _skip_vfp_restore ; If not, ski
                                                            p VFP restore
  224 0000009C ECBC 8A10       VLDMIA           r12!, {s16-s31} ; Yes, restore 
                                                            additional VFP regi
                                                            sters
  225 000000A0         _skip_vfp_restore
  226 000000A0                 ENDIF
  227 000000A0 E8BC 0FF0       LDMIA            r12!, {r4-r11} ; Recover thread
                                                            's registers



ARM Macro Assembler    Page 7 


  228 000000A4 F38C 8809       MSR              PSP, r12    ; Setup the thread'
                                                            s stack pointer
  229 000000A8         ;
  230 000000A8         ;    /* Return to thread.  */
  231 000000A8         ;
  232 000000A8 4770            BX               lr          ; Return to thread!
                                                            
  233 000000AA         ;
  234 000000AA         ;    /* The following is the idle wait processing... in 
                       this case, no threads are ready for execution and the
  235 000000AA         ;       system will simply be idle until an interrupt oc
                       curs that makes a thread ready. Note that interrupts
  236 000000AA         ;       are disabled to allow use of WFI for waiting for
                        a thread to arrive.  */
  237 000000AA         ;
  238 000000AA         __tx_ts_wait
  239 000000AA B672            CPSID            i           ; Disable interrupt
                                                            s
  240 000000AC 6811            LDR              r1, [r2]    ; Pickup the next t
                                                            hread to execute po
                                                            inter
  241 000000AE 6001            STR              r1, [r0]    ; Store it in the c
                                                            urrent pointer
  242 000000B0 B909            CBNZ             r1, __tx_ts_ready ; If non-NULL
                                                            , a new thread is r
                                                            eady!
  243 000000B2                 IF               :DEF:TX_ENABLE_WFI
  247                          ENDIF
  248 000000B2 B662            CPSIE            i           ; Enable interrupts
                                                            
  249 000000B4 E7F9            B                __tx_ts_wait ; Loop to continue
                                                             waiting
  250 000000B6         ;
  251 000000B6         ;    /* At this point, we have a new thread ready to go.
                        Clear any newly pended PendSV - since we are
  252 000000B6         ;       already in the handler!  */
  253 000000B6         ;
  254 000000B6         __tx_ts_ready
  255 000000B6 F04F 6700       MOV              r7, #0x08000000 ; Build clear P
                                                            endSV value
  256 000000BA F04F 28E0       MOV              r8, #0xE000E000 ; Build base NV
                                                            IC address
  257 000000BE F8C8 7D04       STR              r7, [r8, #0xD04] 
                                                            ; Clear any PendSV
  258 000000C2         ;
  259 000000C2         ;    /* Re-enable interrupts and restore new thread.  */
                       
  260 000000C2         ;
  261 000000C2 B662            CPSIE            i           ; Enable interrupts
                                                            
  262 000000C4 E7D9            B                __tx_ts_restore ; Restore the t
                                                            hread
  263 000000C6         
  264 000000C6                 IF               {TARGET_FPU_VFP} = {TRUE}
  265 000000C6                 EXPORT           tx_thread_fpu_enable
  266 000000C6         tx_thread_fpu_enable
  267 000000C6         ;
  268 000000C6         ;    /* Automatic VPF logic is supported, this function 
                       is present only for



ARM Macro Assembler    Page 8 


  269 000000C6         ;       backward compatibility purposes and therefore si
                       mply returns.  */
  270 000000C6         ;
  271 000000C6 4770            BX               LR          ; Return to caller
  272 000000C8         
  273 000000C8                 EXPORT           tx_thread_fpu_disable
  274 000000C8         tx_thread_fpu_disable
  275 000000C8         ;
  276 000000C8         ;    /* Automatic VPF logic is supported, this function 
                       is present only for
  277 000000C8         ;       backward compatibility purposes and therefore si
                       mply returns.  */
  278 000000C8         ;
  279 000000C8 4770            BX               LR          ; Return to caller
  280 000000CA         
  281 000000CA                 EXPORT           _tx_vfp_access
  282 000000CA         _tx_vfp_access
  283 000000CA EEB0 0A40       VMOV.F32         s0, s0      ; Simply access the
                                                             VFP
  284 000000CE 4770            BX               lr          ; Return to caller
  285 000000D0         
  286 000000D0         
  287 000000D0                 ENDIF
  288 000000D0         
  289 000000D0                 ALIGN
  290 000000D0 00000000        LTORG
  291 000000D4                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=..\out_obj\tx_thread_schedule.d -o..\out_obj\tx_thread_sched
<<<<<<< HEAD
ule.o -I.\RTE\Compiler -I.\RTE\_xian -IE:\Users\Administrator\AppData\Local\Arm
\Packs\Keil\ARM_Compiler\1.6.3\Include -IE:\Users\Administrator\AppData\Local\A
=======
ule.o -I.\RTE\Compiler -I.\RTE\_xian -IC:\Users\Administrator\AppData\Local\Arm
\Packs\Keil\ARM_Compiler\1.6.3\Include -IC:\Users\Administrator\AppData\Local\A
>>>>>>> 9ea10fb1b7c6b15b259f2915f5b7166688621f2f
rm\Packs\Keil\STM32F4xx_DFP\2.16.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --
predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 536" --predef
ine="_RTE_ SETA 1" --predefine="STM32F407xx SETA 1" --predefine="_RTE_ SETA 1" 
--predefine="TX_ENABLE_FPU_SUPPORT SETA 1" --list=.\listings\tx_thread_schedule
.lst ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

PendSV_Handler 0000002C

Symbol: PendSV_Handler
   Definitions
      At line 127 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 125 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: PendSV_Handler used once
__tx_PendSVHandler 0000002C

Symbol: __tx_PendSVHandler
   Definitions
      At line 126 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 124 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: __tx_PendSVHandler used once
__tx_ts_handler 0000002C

Symbol: __tx_ts_handler
   Definitions
      At line 131 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      None
Comment: __tx_ts_handler unused
__tx_ts_new 00000070

Symbol: __tx_ts_new
   Definitions
      At line 182 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 150 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
      At line 170 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s

__tx_ts_ready 000000B6

Symbol: __tx_ts_ready
   Definitions
      At line 254 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 242 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: __tx_ts_ready used once
__tx_ts_restore 0000007A

Symbol: __tx_ts_restore
   Definitions
      At line 197 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 262 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

.s
Comment: __tx_ts_restore used once
__tx_ts_wait 000000AA

Symbol: __tx_ts_wait
   Definitions
      At line 238 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 188 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
      At line 249 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s

__tx_wait_here 0000002A

Symbol: __tx_wait_here
   Definitions
      At line 118 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 119 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: __tx_wait_here used once
_skip_vfp_restore 000000A0

Symbol: _skip_vfp_restore
   Definitions
      At line 225 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 223 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: _skip_vfp_restore used once
_skip_vfp_save 00000058

Symbol: _skip_vfp_save
   Definitions
      At line 161 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 159 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: _skip_vfp_save used once
_tx_thread_schedule 00000000

Symbol: _tx_thread_schedule
   Definitions
      At line 84 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule.
s
   Uses
      At line 83 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule.
s
Comment: _tx_thread_schedule used once
_tx_vfp_access 000000CA

Symbol: _tx_vfp_access
   Definitions
      At line 282 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

.s
   Uses
      At line 281 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: _tx_vfp_access used once
tx_thread_fpu_disable 000000C8

Symbol: tx_thread_fpu_disable
   Definitions
      At line 274 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 273 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: tx_thread_fpu_disable used once
tx_thread_fpu_enable 000000C6

Symbol: tx_thread_fpu_enable
   Definitions
      At line 266 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
   Uses
      At line 265 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: tx_thread_fpu_enable used once
|.text| 00000000

Symbol: |.text|
   Definitions
      At line 35 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule.
s
   Uses
      None
Comment: |.text| unused
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

_tx_thread_current_ptr 00000000

Symbol: _tx_thread_current_ptr
   Definitions
      At line 24 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule.
s
   Uses
      At line 143 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: _tx_thread_current_ptr used once
_tx_thread_execute_ptr 00000000

Symbol: _tx_thread_execute_ptr
   Definitions
      At line 25 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule.
s
   Uses
      At line 144 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
Comment: _tx_thread_execute_ptr used once
_tx_thread_preempt_disable 00000000

Symbol: _tx_thread_preempt_disable
   Definitions
      At line 28 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule.
s
   Uses
      At line 93 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule.
s
Comment: _tx_thread_preempt_disable used once
_tx_thread_system_stack_ptr 00000000

Symbol: _tx_thread_system_stack_ptr
   Definitions
      At line 27 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule.
s
   Uses
      None
Comment: _tx_thread_system_stack_ptr unused
_tx_timer_time_slice 00000000

Symbol: _tx_timer_time_slice
   Definitions
      At line 26 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule.
s
   Uses
      At line 163 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s
      At line 199 in file ..\ThreadX\ports\cortex_m4\ac5\src\tx_thread_schedule
.s

5 symbols
366 symbols in table
